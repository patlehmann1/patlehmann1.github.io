name: Notify Subscribers of New Blog Post

on:
  push:
    branches: [master]
    paths:
      - 'src/content/blog/articles.json'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (test without sending emails)'
        required: false
        type: boolean
        default: true

jobs:
  notify-subscribers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Detect new blog posts
        id: detect
        run: |
          # Get current and previous articles.json
          CURRENT_FILE="src/content/blog/articles.json"

          # Get current articles
          CURRENT_ARTICLES=$(cat $CURRENT_FILE)

          # Get previous articles (from parent commit)
          PREVIOUS_ARTICLES=$(git show HEAD~1:$CURRENT_FILE 2>/dev/null || echo "[]")

          # Write to temp files for Node.js processing
          echo "$CURRENT_ARTICLES" > current.json
          echo "$PREVIOUS_ARTICLES" > previous.json

          # Detect new posts using Node.js
          node << 'EOF'
          const fs = require('fs');
          const current = JSON.parse(fs.readFileSync('current.json', 'utf8'));
          const previous = JSON.parse(fs.readFileSync('previous.json', 'utf8'));

          const currentSlugs = current.map(p => p.slug);
          const previousSlugs = previous.map(p => p.slug);

          const newPosts = current.filter(post => !previousSlugs.includes(post.slug));

          if (newPosts.length === 0) {
            console.log('No new posts detected');
            fs.writeFileSync('new-posts.json', JSON.stringify([]));
          } else {
            console.log(`Found ${newPosts.length} new post(s):`);
            newPosts.forEach(post => console.log(`  - ${post.title}`));
            fs.writeFileSync('new-posts.json', JSON.stringify(newPosts, null, 2));
          }
          EOF

          # Check if we have new posts
          NEW_POST_COUNT=$(node -e "console.log(require('./new-posts.json').length)")
          echo "new_post_count=$NEW_POST_COUNT" >> $GITHUB_OUTPUT

      - name: Send email notifications
        if: steps.detect.outputs.new_post_count > 0
        env:
          KIT_API_KEY: ${{ secrets.KIT_API_KEY }}
          DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
          SITE_URL: https://patricklehmann.io
        run: |
          node << 'EOF'
          const fs = require('fs');
          const newPosts = require('./new-posts.json');
          const isDryRun = process.env.DRY_RUN === 'true';
          const apiKey = process.env.KIT_API_KEY;
          const siteUrl = process.env.SITE_URL;

          if (!apiKey) {
            console.error('ERROR: KIT_API_KEY secret not configured');
            process.exit(1);
          }

          // Function to get excerpt (first 200 characters)
          function getExcerpt(content) {
            const text = content.replace(/\n/g, ' ').trim();
            return text.length > 200 ? text.substring(0, 200) + '...' : text;
          }

          // Function to create email HTML
          function createEmailHTML(post) {
            const postUrl = `${siteUrl}/blog/${post.slug}`;
            const excerpt = getExcerpt(post.content);

            return `
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 600px;
                margin: 0 auto;
                padding: 20px;
              }
              .header {
                border-bottom: 3px solid #c86428;
                padding-bottom: 20px;
                margin-bottom: 30px;
              }
              h1 {
                color: #1a1a1a;
                font-size: 28px;
                margin: 0 0 10px 0;
              }
              .meta {
                color: #666;
                font-size: 14px;
                margin-bottom: 20px;
              }
              .excerpt {
                color: #444;
                font-size: 16px;
                line-height: 1.8;
                margin-bottom: 30px;
              }
              .cta {
                text-align: center;
                margin: 40px 0;
              }
              .cta-button {
                display: inline-block;
                background-color: #c86428;
                color: white !important;
                text-decoration: none;
                padding: 14px 32px;
                border-radius: 6px;
                font-weight: 600;
                font-size: 16px;
                transition: background-color 0.2s;
              }
              .cta-button:hover {
                background-color: #d2804d;
              }
              .footer {
                margin-top: 40px;
                padding-top: 20px;
                border-top: 1px solid #eee;
                color: #666;
                font-size: 14px;
                text-align: center;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>${post.title}</h1>
              <div class="meta">
                ${post.readingTime} min read · ${post.tags.join(', ')}
              </div>
            </div>

            <div class="excerpt">
              ${excerpt}
            </div>

            <div class="cta">
              <a href="${postUrl}" class="cta-button">Read the Full Post →</a>
            </div>

            <div class="footer">
              <p>You're receiving this because you subscribed to my newsletter.</p>
              <p><a href="${siteUrl}">Visit patricklehmann.io</a></p>
            </div>
          </body>
          </html>
            `.trim();
          }

          // Process each new post
          async function sendBroadcasts() {
            for (const post of newPosts) {
              const emailHTML = createEmailHTML(post);
              const subject = `New Post: ${post.title}`;

              console.log(`\n${'='.repeat(60)}`);
              console.log(`Processing: ${post.title}`);
              console.log(`Subject: ${subject}`);
              console.log(`URL: ${siteUrl}/blog/${post.slug}`);
              console.log(`${'='.repeat(60)}\n`);

              if (isDryRun) {
                console.log('🧪 DRY RUN MODE - Email preview:');
                console.log('Subject:', subject);
                console.log('Excerpt:', getExcerpt(post.content));
                console.log('\nHTML saved to:', `email-preview-${post.slug}.html`);
                fs.writeFileSync(`email-preview-${post.slug}.html`, emailHTML);
                console.log('\n✅ Dry run complete (no emails sent)\n');
              } else {
                // Send via Kit.com API
                // Note: The exact endpoint may need adjustment based on Kit.com API docs
                const broadcastData = {
                  subject: subject,
                  content: emailHTML,
                  description: post.description,
                  public: true,
                  published_at: new Date().toISOString(),
                  send_at: new Date().toISOString()
                };

                try {
                  const response = await fetch('https://api.kit.com/v4/broadcasts', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                      'X-Kit-Api-Key': apiKey
                    },
                    body: JSON.stringify(broadcastData)
                  });

                  if (response.ok) {
                    const result = await response.json();
                    console.log('✅ Email sent successfully!');
                    console.log('Broadcast ID:', result.broadcast?.id || 'N/A');
                  } else {
                    const error = await response.text();
                    console.error('❌ Failed to send email:', response.status, error);
                    process.exit(1);
                  }
                } catch (error) {
                  console.error('❌ Error sending email:', error.message);
                  process.exit(1);
                }
              }
            }

            console.log(`\n✅ Processed ${newPosts.length} new post(s)`);
          }

          sendBroadcasts();
          EOF

      - name: Upload email previews (dry run only)
        if: steps.detect.outputs.new_post_count > 0 && (github.event.inputs.dry_run == 'true' || github.event.inputs.dry_run == true)
        uses: actions/upload-artifact@v4
        with:
          name: email-previews
          path: email-preview-*.html
          retention-days: 7
